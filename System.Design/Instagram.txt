System Design (Instagram)

1. scope (2-3 minutes): "Let me first understand the key features we need to design 
    for Instagram. Would these be our core equirements:
    - User feed with photos/videos
    - User profiles
    - Photo/video uploads
    - Like/comment functionality
    - Follow/unfollow users
    - Search functionality
    - Should we include additional features like Stories, Direct Messages, 
    or keep it focused on core features?"

2. Define scale and constraints (2-3 minutes): Share rough estimates like:
    - Daily active users: ~1 billion
    - Average photo size: ~1MB
    - Daily uploads: ~100 million photos
    - Read-heavy system (more views than uploads)

3. High-level system design (10-15 minutes):
    - Client-side Architecture:
        * **Single Page Application (SPA):** 
            * **Rationale:** SPAs offer a more interactive and responsive user 
            experience compared to traditional multi-page applications. 
            They load the initial HTML, CSS, and JavaScript once, 
            and then dynamically update the content without requiring full page reloads. 
            This leads to faster perceived performance and a smoother user experience.
            * **Framework:** React/TypeScript is a popular choice for building SPAs 
            due to its component-based architecture, strong typing capabilities, 
            and large community support.

        * **State Management:**
            * **Redux:** A predictable state container that helps manage and update 
            the application's state in a centralized and efficient way. 
            It provides a clear and structured way to handle data flow and side effects.
            * **Context API:** A built-in React feature for sharing data and state across 
            different components without the need for props drilling. 
            It can be simpler to use than Redux for smaller applications or 
            when the state management needs are less complex.
            * **Zustand:** A lightweight and performant state management library that 
            offers a more concise and intuitive API compared to Redux. 
            It's a good choice for applications that prioritize simplicity and performance.
            * **Choice:** The best choice for state management depends on the 
            specific needs of the application, the size of the team, 
            and the desired level of complexity.

        * **Client-side Caching Strategy:**
            * **Browser Caching:** Utilize browser caching mechanisms (e.g., 
            HTTP caching headers) to store static assets (images, CSS, JavaScript) 
            in the browser's cache. 
            This significantly reduces the need to download these assets repeatedly.
            * **Data Caching:** Implement a client-side cache (e.g., using libraries like 
            `localForage`) to store frequently accessed data (e.g., user profiles, recent posts). 
            This can improve performance and reduce the number of API requests.

        * **Progressive Image Loading:**
            * **Placeholder Images:** Display low-resolution placeholders or blurred versions 
            of images while the full-resolution images are loading. 
            This provides a faster initial loading experience and improves perceived performance.
            * **Lazy Loading:** Load images only when they are about to become visible in the viewport.
            This prevents unnecessary image downloads and saves bandwidth.

        * **Infinite Scroll:**
            * **Rationale:** Load content (e.g., posts in the feed) gradually as the user 
            scrolls down the page. 
            This enhances user experience by providing a continuous flow of content without 
            the need for page reloads.
            * **Implementation:** Use techniques like `Intersection Observer API` to detect when 
            elements enter or leave the viewport and trigger the loading of additional content.

        * **Real-time Updates Handling:**
            * **WebSockets:** Establish a persistent, two-way communication channel between 
            the client and server using WebSockets. 
            This enables real-time updates for features like notifications, chat messages, 
            and live updates to posts.
            * **Server-Sent Events (SSE):** A simpler alternative to WebSockets for unidirectional 
            communication from server to client. Suitable for scenarios where real-time 
            updates are primarily from the server to the client.
            * **Polling:** Regularly poll the server for updates at specific intervals. 
            While less efficient than WebSockets or SSE, it can be a simpler option for 
            less demanding real-time requirements.

    - API Design:
        - GET /api/feed?page=2&limit=20 - Get user's feed
        - GET /api/users/123/followers - Get user's followers
        - GET /api/users/123/following - Get user's following
        - GET /api/posts/123 - Get post details
        - GET /api/search?q=xyz - Search for users/posts

        - POST /api/posts - Upload new post
            `{
                "userId": "123",
                "media": "image.jpg",
                "caption": "Hello World!"
                "descritptiom": "Hello World"
            }`
        - POST /api/user/profile/
            {
                name: '',
                email: '',
                mobile: '',

            }
        - POST /api/user/profile/checkusername/
        - POST /api/posts/{id}/comment - Comment on a post
            `{
                userId: 123,
                postId: 234,
                comment: 'jfgjghjg'
            }`
        - POST /api/posts/{id}/like - Like a post
            `{
                userId: 123,
                postId: 234
            }`
        - POST /api/posts/{id}/unlike - Unlike a post
            `{
                userId: 123,
                postId: 234
            }`
        - POST /api/users/{id}/follow - Follow a user
            `{
                userId: 123,
                postId: 234
            }`
        - POST /api/users/{id}/unfollow - Unfollow a user
            `{
                userId: 123,
                postId: 234
            }`

    - Backend Components:
        - Load Balancers
        - Web Servers
        - Application Servers
        - Cache Layer (Redis)
        - Database (PostgreSQL for users/relationships, MongoDB for posts)
        - CDN for static content
        - Object Storage (S3) for media
        - Microservices: 
            Briefly discuss the potential benefits of a microservices architecture 
            (e.g., breaking down the system into smaller, 
            independent services for better scalability, maintainability, and fault isolation).
        - Messaging Queue: 
            Introduce a message queue (like Kafka or RabbitMQ) to handle asynchronous 
            tasks like image processing, notifications, and background jobs.


4. Deep dive into frontend-specific concerns (10-15 minutes):
    Performance Optimizations:
        - Code Splitting (to avoid giant JS bundles).
        - CDN for JS/CSS delivery.
        - Skeleton screens & prefetching to improve perceived performance.
        - Image lazy loading and progressive loading
        - Virtual scrolling for feed
        - Client-side caching strategies
        - Service Worker for offline capabilities
        - WebSocket connections for real-time features

    Data Flow:
        - User Action ‚Üí React Component ‚Üí Redux Action ‚Üí API Call ‚Üí Update Store ‚Üí Re-render

5. Identify and address potential bottlenecks (5 minutes):
    - Large JS bundles ‚Üí long TTI (time to interactive).
    - Memory leaks in infinite scroll.
    - Race conditions in concurrent requests.
    - Offline-first complexity.
    - Image optimization and compression
    - Cache invalidation
    - Feed generation performance
    - Real-time updates scaling
    - Database sharding and indexing
    - Rate limiting and throttling
    - CDN cache invalidation


6. Maintenance: 
    - Linting + Prettier
    - Testing Pyramid in Frontend
        1. Unit Tests üß© (base of pyramid, most tests)
            Scope: Smallest pieces of logic ‚Üí functions, reducers, hooks, or tiny components.
            Examples:
            Reducer updates state correctly.
            Utility function formats dates.
            <Button /> renders with correct text.
            Tools: Jest, React Testing Library (for small components).
            Goal: Fast, isolated, catch logic bugs early.
        2. Component / Integration Tests üñºÔ∏è (middle layer)
            Scope: A React component or a few components working together.
            Examples:
            <Feed /> fetches posts and renders them.
            Clicking ‚ÄúLike‚Äù updates the UI and dispatches Redux action.
            Modal opens/closes correctly when triggered.
            Tools: React Testing Library, Enzyme.
            Goal: Verify user interactions + state flow (not just output).
            Note: Sometimes called ‚ÄúIntegration tests‚Äù if multiple components + store involved.
        3. E2E (End-to-End Tests) üåç (top of pyramid, fewest tests)
            Scope: Full application flow with backend (or mock API).
            Examples:
            User logs in ‚Üí opens feed ‚Üí likes a post ‚Üí sees update.
            Uploading a photo actually creates a post.
            Tools: Cypress, Playwright, Selenium.
            Goal: Ensure critical user journeys work as expected.
            Tradeoff: Slow & fragile ‚Üí only use for high-value flows.
    - Logging:
        - Client-side error tracking (Sentry)
        - Server-side error logging (ELK stack)
        - Performance monitoring (New Relic)
    - Error handling:
        - Retry mechanisms for failed API calls
        - Offline mode support
        - Graceful degradation
        - User feedback mechanisms
    - Security:
        - CSRF protection
        - Rate limiting
        - Content Security Policy
        - XSS prevention
        - Data encryption
        - Input validation
        - HTTPS?
    - Analytics:
        - User behavior tracking:
            - Page views
            - Time spent on feed
            - Scroll depth
            - Feature usage
            - Drop-off points
        // Performance Monitoring
        - Core Web Vitals:
            - LCP (Largest Contentful Paint)
            - FID (First Input Delay)
            - CLS (Cumulative Layout Shift)
        - Custom metrics:
            - Image load times
            - Feed rendering performance
            - Time to interactive
    Feature Flagging & A/B Testing:
        - Gradual feature rollouts
        - Experimentation framework
        - User segmentation
        - Metrics tracking
