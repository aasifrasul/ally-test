services:
    app:
        build:
            context: .
            dockerfile: Dockerfile
        ports:
            - '3100:3100'
        environment:
            - ENV=development
            - POSTGRES_HOST=pgbouncer
            - POSTGRES_PORT=6432
            - MYSQL_HOST=mysql
            - MONGODB_HOST=mongodb
            - REDIS_HOST=redis
            - REDIS_URL=redis://redis:6379
        depends_on:
            - pgbouncer
            - mysql
            - mongodb
            - redis
        volumes:
            - .:/app
            - /app/node_modules
        networks:
            - app-network

    pgbouncer:
        image: bitnami/pgbouncer:latest
        environment:
            - POSTGRESQL_HOST=postgres
            - POSTGRESQL_PORT=5432
            - POSTGRESQL_DATABASE=test
            - POSTGRESQL_USERNAME=test
            - POSTGRESQL_PASSWORD=test
            - PGBOUNCER_PORT=6432
            - PGBOUNCER_AUTH_TYPE=md5
            - PGBOUNCER_POOL_MODE=transaction
            - PGBOUNCER_MAX_CLIENT_CONN=1000
            - PGBOUNCER_DEFAULT_POOL_SIZE=20
        ports:
            - '6432:6432'
        depends_on:
            - postgres
        networks:
            - app-network

    postgres:
        image: postgres:17
        environment:
            POSTGRES_DB: test
            POSTGRES_USER: test
            POSTGRES_PASSWORD: test
        ports:
            - '5432:5432'
        volumes:
            - postgres_data:/var/lib/postgresql/data
        networks:
            - app-network

    mysql:
        image: mysql:8.0
        environment:
            MYSQL_ROOT_PASSWORD: root
            MYSQL_DATABASE: test
            MYSQL_USER: test
            MYSQL_PASSWORD: test
        ports:
            - '3306:3306'
        volumes:
            - mysql_data:/var/lib/mysql
        networks:
            - app-network

    mongodb:
        image: mongo:8.0
        environment:
            MONGO_INITDB_ROOT_USERNAME: test
            MONGO_INITDB_ROOT_PASSWORD: test
        ports:
            - '27017:27017'
        volumes:
            - mongodb_data:/data/db
        networks:
            - app-network

    redis:
        image: redis:7.4
        ports:  
            - '6379:6379'
        healthcheck:
            test: ['CMD', 'redis-cli', 'ping']
            interval: 5s
            timeout: 5s
            retries: 5
        restart: always
        networks:
            - app-network

volumes:
    postgres_data:
    mysql_data:
    mongodb_data:

networks:
    app-network:
        driver: bridge
# To start the services: docker-compose up --build
# To start the services(V2): docker compose up --build
# docker compose -f 'docker-compose.yml' up -d --build 'mongodb'
# To stop the services: docker-compose down

# On Linux
# sudo systemctl restart docker
